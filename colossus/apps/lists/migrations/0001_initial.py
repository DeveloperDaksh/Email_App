# Generated by Django 2.1 on 2018-08-12 20:58

import colossus.storage
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='MailingList',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('name', models.CharField(max_length=100, verbose_name='name')),
                ('slug', models.SlugField(max_length=100, unique=True, verbose_name='list short URL')),
                ('subscribers_count', models.PositiveIntegerField(default=0, verbose_name='subscribers')),
                ('open_rate', models.FloatField(default=0.0, verbose_name='opens')),
                ('click_rate', models.FloatField(default=0.0, verbose_name='clicks')),
                ('date_created', models.DateTimeField(auto_now_add=True, verbose_name='created')),
                ('contact_email_address', models.EmailField(blank=True, max_length=254, verbose_name='contact email address')),
                ('website_url', models.URLField(blank=True, help_text='Where did people opt in to this list?', verbose_name='website URL')),
                ('campaign_default_from_name', models.CharField(blank=True, max_length=100, verbose_name='default from name')),
                ('campaign_default_from_email', models.EmailField(blank=True, max_length=254, verbose_name='default from email address')),
                ('campaign_default_email_subject', models.CharField(blank=True, max_length=150, verbose_name='default subject')),
                ('enable_recaptcha', models.BooleanField(default=False, verbose_name='enable reCAPTCHA')),
                ('list_manager', models.EmailField(blank=True, help_text='Email address to handle subscribe/unsubscribe requests.It can be a real email address or an automated route to handle callbacks/webhooks.', max_length=254, verbose_name='list manager')),
                ('smtp_host', models.CharField(blank=True, max_length=200, verbose_name='host')),
                ('smtp_port', models.PositiveIntegerField(blank=True, null=True, verbose_name='port')),
                ('smtp_username', models.CharField(blank=True, max_length=200, verbose_name='username')),
                ('smtp_password', models.CharField(blank=True, max_length=200, verbose_name='password')),
                ('smtp_use_tls', models.BooleanField(default=True, verbose_name='use TLS')),
                ('smtp_use_ssl', models.BooleanField(default=False, verbose_name='use SSL')),
                ('smtp_timeout', models.PositiveIntegerField(blank=True, null=True, verbose_name='timeout')),
                ('smtp_ssl_keyfile', models.TextField(blank=True, verbose_name='SSL keyfile')),
                ('smtp_ssl_certfile', models.TextField(blank=True, verbose_name='SSL certfile')),
                ('forms_custom_css', models.TextField(blank=True, help_text='Custom CSS will be applied to all subscription form pages.', verbose_name='custom CSS')),
                ('forms_custom_header', models.TextField(blank=True, help_text='Header displayed on all subscription form pages. Accepts HTML.If empty, the name of the mailing list will be used.', verbose_name='custom header')),
            ],
            options={
                'verbose_name': 'list',
                'verbose_name_plural': 'lists',
                'db_table': 'colossus_mailing_lists',
            },
        ),
        migrations.CreateModel(
            name='SubscriberImport',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('upload_date', models.DateTimeField(auto_now_add=True, verbose_name='upload date')),
                ('file', models.FileField(storage=colossus.storage.PrivateMediaStorage(), upload_to='uploads', verbose_name='CSV file')),
                ('columns_mapping', models.TextField(blank=True, verbose_name='columns mapping')),
                ('subscriber_status', models.PositiveSmallIntegerField(choices=[(1, 'Pending'), (2, 'Subscribed'), (3, 'Unsubscribed'), (4, 'Cleaned')], default=2, verbose_name='assign status to subscriber')),
                ('status', models.PositiveSmallIntegerField(choices=[(1, 'Pending'), (2, 'Queued'), (3, 'Importing'), (4, 'Completed'), (5, 'Errored'), (6, 'Canceled')], default=1, verbose_name='status')),
                ('size', models.PositiveIntegerField(default=0, verbose_name='size')),
                ('strategy', models.PositiveSmallIntegerField(choices=[(1, 'Create new subscribers only'), (2, 'Update existing subscribers only'), (3, 'Update or create subscribers')], default=3, help_text='The email address will be used as the main subscriber identifier to determine if they are already on the list.', verbose_name='import strategy')),
                ('mailing_list', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='subscribers_imports', to='lists.MailingList', verbose_name='mailing list')),
                ('user', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='subscribers_imports', to=settings.AUTH_USER_MODEL, verbose_name='user')),
            ],
            options={
                'verbose_name': 'subscribers import',
                'verbose_name_plural': 'subscribers imports',
                'db_table': 'colossus_subscribers_imports',
            },
        ),
    ]
